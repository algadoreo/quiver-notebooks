{
  "title": "SPIDER + Planck pipeline summary",
  "cells": [
    {
      "type": "markdown",
      "data": "# Goal\n\nReduce the effect of the `polyfilter` by adding _Planck_ (R3.00 / R3.01) data into the SPIDER maps."
    },
    {
      "type": "markdown",
      "data": "# Background\n\nScan-synchronous noise (SSN) in the SPIDER data is removed using a 5th-order polynomial fit. This is the same as passing the timestream through a highpass filter, as the low frequencies are fitted out.\n\nLow frequencies correspond to large-scale variations in the sky – i.e., it takes longer for the telescope to scan large patches of the sky. Unfortunately, there is no way for the filter to distinguish between SSNs and CMB fluctuations, so getting rid of the former means we lose the latter as well. The `polyfilter`’s transfer function in multipole $\\ell$-space is shown in Figure 1.\n\nA possible method of recovering information about the large-scale CMB information is to obtain them from another source. The _Planck_ mission, which had full-sky access, is one such source."
    },
    {
      "type": "markdown",
      "data": "![transfer_fcn.png](quiver-image-url/transfer_fcn.png =945x561)\n**Figure 1:** Transfer function for the `polyfilter` for the _TT_ power spectrum. Input is a noise map generated from the _Planck_ half-mission 1 noise covariance (R3.01)."
    },
    {
      "type": "markdown",
      "data": "# Method\n\n### Combining datasets\n\nWe can combine data from SPIDER and _Planck_ in the following way. The point is that we don’t want the `polyfilter` to _Planck_. First, the data from each experiment is the sum of the CMB $C$ and instrument noise $N$:\n$$\\begin{align}\nS &= C_S + N_S, \\\\\nP &= C_P + N_P.\n\\end{align}$$\n\nStart by taking their difference\n$$ S - P = (C_S - C_P) + (N_S - N_P). $$\n\nBy applying the `polyfilter`,\n$$\\begin{align} f(S-P) &= \\tilde{S} - \\tilde{P} \\\\\n&= (\\tilde{C}_S - \\tilde{C}_P) + (\\tilde{N}_S - \\tilde{N}_P),\n\\end{align}$$ and then adding the _Planck_ data back in, we end up with\n$$\\begin{align}\nf(S-P) + P = (\\tilde{C}_S - \\tilde{C}_P + C_P) + (\\tilde{N}_S - \\tilde{N}_P + N_P).\n\\end{align}$$\n\nTo drive home what this equation means, let’s take the limit of a highpass filter with a hard cutoff. Such a filter kills off everything at low $\\ell$s while doing nothing at high $\\ell$s,\n$$ \\begin{align}\nf (S-P) &= \n\\begin{cases}\n0 & \\qquad \\text{at low } \\ell \\text{s} \\\\\nS - P & \\qquad \\text{at high } \\ell \\text{s}\n\\end{cases}\\\\\n\\Rightarrow f(S-P) + P &=\n\\begin{cases}\nP = C_P + N_P & \\text{at low } \\ell \\text{s}\\\\\nS = C_S + N_S & \\text{at high } \\ell \\text{s}\n\\end{cases}\n\\end{align}$$\n\nWith a filter that doesn’t have a hard cutoff, we won’t see such a clean division between _Planck_ and SPIDER, each with either a 0% or 100% contribution. A smoothly rolling-off filter will result in a combination of both experiments as a function of $\\ell$, which may or may not sum to 100% at every $\\ell$. Our goal is to provide a method that _does_ do that – return a flat transfer function.\n\n### Datasets\n\nFor our analysis, we use SPIDER’s `DCCLEAN08` timestreams and the _Planck_ R3.00 maps (full-mission and the two half-missions). _Planck_ R3.00’s covariances are broken and supposedly fixed in R3.01, but otherwise the maps are identical in both versions. From these _Planck_ maps, simulated timestreams are generated (“re-observed”) using SPIDER’s `beam20`, `cal_fwhm_29`, and `net18`.\n\nIn the language of the above section, $S$ is the SPIDER `DCCLEAN08` timestream and $P$ is the re-observed _Planck_ timestream. The two are sent down the pipeline described above, resulting in a filtered timestream; this is repeated for each of the 1859 channels spread across the 6 focal plane units (FPUs).\n\n### Mapmaking and power spectra\n\nThe filtered timestreams can be turned into maps by applying the correct projection matrix, but I won’t get into the details of mapmaking here. We are more interested in the power spectra from these maps.\n\nA single map is created for each FPU by taking into account all of its component channels using `UnifileMap.from_tod()` and `UnifileMap.solve_map()`. Since the odd-numbered FPUs correspond to 150 GHz channels and the even-numbered to 95 GHz, we can generate the map for each of the two frequencies by co-adding the maps from the appropriate FPUs using `UnifileMap.unimap_coadd()`.\n\nFinally, power spectra of these maps can be created using `map.estimate_spectrum()`. There are the autospectra from each of the _Planck_ datasets – the full-mission and the two half-missions – as well as the cross-spectra between them. We are mostly intersted in the cross-spectra between the two half-missions as their noise are uncorrelated.\n\n### Interleaving\n\nSo far, we’ve only created one realization of the cross-spectrum – one sample of the $C_\\ell$, which we expect (each bin) to be drawn from some probability distribution. We’d like to know the expected value (mean) and variance (error) in each bin of our $C_\\ell$.\n\nTo generate a decent sample size of cross-spectra between the two half-missions, the SPIDER timestream is divided into “chunks.” Every 14th chunk is placed in a “chunkset,” i.e., chunks 1, 15, 29, … are in chunkset 1; chunks 2, 16, 30, … in chunkset 2, etc. up to chunkset 14. Through this process of “interleaving,” we can get a total of 378 cross-spectra, from which we can get the mean and variance of $C_\\ell$ in each bin.\n\nThe number 378 comes from the fact that there are $\\left(\\begin{smallmatrix} 14 \\\\ 2 \\end{smallmatrix}\\right)$ ways to cross the 14 chunksets in each frequency (95 GHz $\\times$ 95 GHz; same for 150 GHz), and $14^2$ ways to cross different frequencies (95 GHz $\\times$ 150 GHz):\n\n$$\n2 \\times \\begin{pmatrix} 14 \\\\ 2 \\end{pmatrix} + 14^2 = 378.\n$$\n\nThis number can be multiplied by two if HM1 $\\times$ HM2 is different from HM2 $\\times$ HM1, but for now, let’s keep these two sets distinct.\n\nWith 378 cross-spectra, we can much better quantify the mean and variance of $C_\\ell$ in each bin. A theorem in statistics says that, if $\\{\\bar{X}\\}$ is a set of sample means of some distribution with mean $\\mu$ and variance $\\sigma^2$, then $E[\\bar{X}] = \\mu$ and $\\mathrm{var}(\\bar{X}) = \\sigma^2/N$, where $N$ is the number of $\\bar{X}$ you have. For us, $N = 378$.\n\n### Null tests\n\nWe performed a _null test_ to assess the pipeline we’ve developed. The test we chose involved splitting the channels into _inner_ and _outer_ sets, based on their location on the detector plane. The maps created from each set should be statistically identical, that is, the cross-spectra made from the maps’ difference should be consistent with zero.\n\nThe result of this _null test_, shown below, suggests that our pipeline does not contain systematic errors.\n\n![nulltestspec_TT.png](quiver-image-url/nulltestspec_TT.png =532x381)\n\n![nulltestspec_EE.png](quiver-image-url/nulltestspec_EE.png =532x381)\n\n![nulltestspec_BB.png](quiver-image-url/nulltestspec_BB.png =532x381)\n\n![nulltestspec_EB.png](quiver-image-url/nulltestspec_EB.png =532x381)\n**Figure 2:** Cross-spectra made from the difference maps between _inner_ and _outer_ detector sets. There is no clear evidence of a signal or residual present in these maps.\n\n### _Planck_ noise\n\nThe errorbars produced via this method only takes into account the variance arising from the SPIDER re-observation of the _Planck_ CMB maps. We need to account for the noise inherent to _Planck_ as well if we want a correct assessment of the noise budget. In the simplest case where the two sources of error to be independent, the variances add simply, and the standard deviations (“errors”) add in quadrature:\n$$\n\\text{Total noise} = \\sqrt{\\left(\\text{noise from our pipeline}\\right)^2 + \\left(\\text{noise in }\\textit{Planck}\\text{ maps}\\right)^2}.\n$$\n\nTo get _Planck_’s contribution to our noise budget, we need to know the `polyfilter`’s effects on _Planck_’s noise. Noise maps are easily realized from the published _Planck_ covariance matrices (R3.01) using `UnifileMap.plancktools.gen_planck_noise()`. As _Planck_’s half-mission 2 continues to have non-positivity problems with its covariance matrix, this is only done for the half-mission 1, for which we realize 100 noise maps for each frequency (100 and 143 GHz). As in the main pipeline, these maps are then re-observed with SPIDER’s `beam20`, and the resulting TOD fed through the same `polyfilter`. We first verify that their autospectra and cross-spectra behave as expected, i.e., the former scales as $\\sim \\ell^2$ (characteristic of Gaussian noise) while the latter should be consistent with zero. The results are shown below.\n\nAs before, we create 378 cross-spectra by interleaving, with the mean and variance of the 378 forming the central point and errorbar. Since we only have half-mission 1 available (as full-mission is not used in the main pipeline), our cross-spectra are made by forming non-repeating pairs from the set of filtered maps (100 at each frequency) of half-mission 1. We end up with 50 sets of cross-spectra (100 / 2 = 50). The final _Planck_ noise error is taken to be the variance in this set of 50.\n\n![plancknoise_xspec_TT.png](quiver-image-url/plancknoise_xspec_TT.png =532x381)\n\n![plancknoise_xspec_EE.png](quiver-image-url/plancknoise_xspec_EE.png =532x381)\n\n![plancknoise_xspec_BB.png](quiver-image-url/plancknoise_xspec_BB.png =532x381)\n\n![plancknoise_xspec_EB.png](quiver-image-url/plancknoise_xspec_EB.png =532x381)\n**Figure 4:** The cross-spectra of the _Planck_ noise realizations are scattered around zero, as expected. The errorbars here reflect the variance in the 50 sets of cross-spectra, and are taken as the “_Planck_ noise” contribution to the total error."
    },
    {
      "type": "markdown",
      "data": "# Results\n\nThe final resulting cross-spectra and their errors are shown below. As described in the previous section, the errorbars are obtained by adding in quadrature the contributions from our pipeline and from the noise inherent in the _Planck_ maps.\n\n![BBhigh_ell_spectrum_comp.png](quiver-image-url/BBhigh_ell_spectrum_comp.png =460x345)\n\n![EE_spectrum_comp.png](quiver-image-url/EE_spectrum_comp.png =460x345)\n\n![EB_spectrum_comp.png](quiver-image-url/EB_spectrum_comp.png =460x345)"
    }
  ]
}